module Tree-Eta.

data Nat : ★ =
  | zero : Nat
  | succ : Nat ➔ Nat
  .
data Bool : ★ =
  | true : Bool
  | flse : Bool
  .
data Tree : ★ =
  | leaf : Nat ➔ Tree
  | node : (Bool ➔ Tree) ➔ Tree
  .

indTree : ∀ P: Tree ➔ ★. (∀ x: P (leaf n)) ➔ (∀ n: Bool ➔ Tree. (Π b: Bool. P (n b)) ➔ P (node n)) ➔ Π t: Tree ➔ P t
  = Λ P. λ base. λ step. λ t. μ ih. t @P {
    | leaf x ↦ base -x -- P (leaf x)
    | node n ↦         -- P (node (λ b. fromNat/ih (n b)))
        [ n' : Bool ➔ Tree = λ b. fromNat/ih (n b)]
        - step -n' (λ b. ih (n b))
    }
    .